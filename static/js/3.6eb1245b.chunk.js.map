{"version":3,"sources":["components/Alert/Alert.module.css","components/ContactForm/ContactForm.module.css","transition/Transition.module.css","components/ContactList/transitions/ContactTransition.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","views/ContactsView/ContactsView.module.css","components/Alert/Alert.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView/ContactsView.js"],"names":["module","exports","alertRoot","document","querySelector","Alert","createPortal","className","s","popup","this","props","children","Component","ContactForm","state","name","number","showAlert","errorMessage","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","contacts","find","toLowerCase","toggleAlert","reset","onSubmit","message","setTimeout","form","CSSTransition","in","timeout","classNames","alert","unmountOnExit","label","text","type","onChange","Button","variant","color","connect","getContacts","dispatch","newName","contactsOperations","addContact","ContactList","JSON","stringify","localStorage","setItem","allContacts","onRemove","TransitionGroup","component","list","length","map","id","contactTransition","items","onClick","getVisibleContacts","deleteContact","getFilter","changeFilter","target","filter","filter__input","ContactsView","fetchContacts","section","container"],"mappings":"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","file":"static/js/3.6eb1245b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"popup\":\"Alert_popup__2ZHqq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__17KPb\",\"label\":\"ContactForm_label__3hrSJ\",\"text\":\"ContactForm_text__1VHTf\",\"form__btn\":\"ContactForm_form__btn__3N529\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Transition_enter__Cub4t\",\"enterActive\":\"Transition_enterActive__3W43o\",\"exit\":\"Transition_exit__2InL4\",\"exitActive\":\"Transition_exitActive__2nFlO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"ContactTransition_enter__3au5M\",\"enterActive\":\"ContactTransition_enterActive__1UUVX\",\"exit\":\"ContactTransition_exit__2fp6j\",\"exitActive\":\"ContactTransition_exitActive__10o5J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2OvgO\",\"text\":\"ContactList_text__2eRKJ\",\"items\":\"ContactList_items__2LXjZ\",\"delete_btn\":\"ContactList_delete_btn__2hdMS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__221if\",\"filter__input\":\"Filter_filter__input__2tz_4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"ContactsView_enter__32u1x\",\"exit\":\"ContactsView_exit__2O1ej\",\"section\":\"ContactsView_section__1Wy_n\",\"container\":\"ContactsView_container__22-YJ\",\"text\":\"ContactsView_text__2fkQ3\"};","import React, { Component } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport s from './Alert.module.css';\r\n\r\nconst alertRoot = document.querySelector('#popap-root');\r\n\r\nexport default class Alert extends Component {\r\n  render() {\r\n    return createPortal(\r\n      <div className={s.popup}>{this.props.children} </div>,\r\n      alertRoot,\r\n    );\r\n  }\r\n}\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\r\nimport Alert from '../Alert';\r\n\r\nimport s from './ContactForm.module.css';\r\nimport alert from '../../transition/Transition.module.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    showAlert: false,\r\n    errorMessage: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    if (!name || !number) {\r\n      this.toggleAlert('The list is empty');\r\n      return;\r\n    }\r\n\r\n    if (\r\n      this.props.contacts.find(\r\n        ({ name }) => name.toLowerCase() === this.state.name.toLowerCase(),\r\n      )\r\n    ) {\r\n      this.toggleAlert('Contact is already exist');\r\n      this.reset();\r\n      return;\r\n    }\r\n\r\n    this.props.onSubmit(name, number);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  toggleAlert = message => {\r\n    this.setState({ showAlert: true, errorMessage: message });\r\n    setTimeout(() => this.setState({ showAlert: false }), 1000);\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { showAlert, errorMessage } = this.state;\r\n    return (\r\n      <form className={s.form} onSubmit={this.handleSubmit}>\r\n        <CSSTransition\r\n          in={showAlert}\r\n          timeout={250}\r\n          classNames={alert}\r\n          unmountOnExit\r\n        >\r\n          <Alert>\r\n            <p>{errorMessage}</p>\r\n          </Alert>\r\n        </CSSTransition>\r\n        <label className={s.label}>\r\n          <span className={s.text}>Имя</span>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label className={s.label}>\r\n          <span className={s.text}>Номер</span>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          Сохранить\r\n        </Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (newName, number) =>\r\n    dispatch(contactsOperations.addContact(newName, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport contactTransition from './transitions/ContactTransition.module.css';\r\nimport {\r\n  contactsOperations,\r\n  getVisibleContacts,\r\n  getContacts,\r\n} from '../../redux/contacts';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport s from './ContactList.module.css';\r\n\r\nclass ContactList extends Component {\r\n  componentDidUpdate() {\r\n    const contacts = JSON.stringify(this.props.contacts);\r\n    localStorage.setItem('saveContacts', contacts);\r\n  }\r\n\r\n  render() {\r\n    const { contacts, allContacts, onRemove } = this.props;\r\n    return (\r\n      <>\r\n        <TransitionGroup component=\"ul\" className={s.list}>\r\n          {contacts.length === 0 && allContacts.length !== 0 ? (\r\n            <CSSTransition in={true} timeout={0} unmountOnExit>\r\n              <li className={s.text}>Countact is not founding</li>\r\n            </CSSTransition>\r\n          ) : (\r\n            contacts.map(({ name, number, id }) => (\r\n              <CSSTransition\r\n                key={id}\r\n                classNames={contactTransition}\r\n                timeout={250}\r\n              >\r\n                <li className={s.items}>\r\n                  <p className={s.text}>\r\n                    {name}: {number}\r\n                  </p>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    onClick={() => onRemove(id)}\r\n                  >\r\n                    Удалить\r\n                  </Button>\r\n                </li>\r\n              </CSSTransition>\r\n            ))\r\n          )}\r\n        </TransitionGroup>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: getVisibleContacts(state),\r\n    allContacts: getContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onRemove: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport { changeFilter, getFilter, getContacts } from '../../redux/contacts';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange, contacts }) => {\r\n  return (\r\n    <>\r\n      {contacts.length === 0 ? (\r\n        <CSSTransition in={true} timeout={0} unmountOnExit>\r\n          <p>Please, add a new contact</p>\r\n        </CSSTransition>\r\n      ) : (\r\n        <CSSTransition in={true} timeout={250} classNames={s} unmountOnExit>\r\n          <label className={s.filter}>\r\n            <span>Find contacts by name</span>\r\n            <input\r\n              className={s.filter__input}\r\n              type=\"text\"\r\n              value={value}\r\n              onChange={onChange}\r\n            />\r\n          </label>\r\n        </CSSTransition>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: getFilter(state),\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ContactForm from '../../components/ContactForm';\r\nimport ContactList from '../../components/ContactList';\r\nimport Filter from '../../components/Filter';\r\nimport { contactsOperations } from '../../redux/contacts';\r\n\r\nimport s from './ContactsView.module.css';\r\n\r\nclass ContactsView extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className={s.section}>\r\n        <div className={s.container}>\r\n          <ContactForm />\r\n\r\n          <h2>Контакты</h2>\r\n          <Filter />\r\n\r\n          <ContactList />\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactsView);\r\n"],"sourceRoot":""}